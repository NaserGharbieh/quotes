/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.*;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class App {
    public static void main(String[] args) {
       // System.out.println(quotePrint());
        fetchAndUpdateQuotes();
        displayRandomLocalQuote();


    }
    public static String quotePrint(){
        Quote randomQuote=null;
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\NASER GHARBIEH\\projects\\quotes\\app\\src\\main\\resources\\recentquotes.json"));
            Gson gson = new Gson();

            Type quoteListType = new TypeToken<List<Quote>>() {
            }.getType();
            List<Quote> quotesFromFile = gson.fromJson(bufferedReader, quoteListType);


            Random random = new Random();
            int randomIndex = random.nextInt(quotesFromFile.size());
             randomQuote = quotesFromFile.get(randomIndex);



        } catch (IOException e) {
            e.printStackTrace();
        }

        return ("Quote from file: " + randomQuote.toString());
    }


    public void WriteQout() {

        Quote motivation = new Quote("Daivid Gogins", "Who will carry the BOATS and THE LOGS");


        Gson gson = new Gson();


        FileWriter fileWriter = null;
        try {
            fileWriter = new FileWriter("C:\\Users\\NASER GHARBIEH\\projects\\quotes\\app\\src\\main\\resources\\writeRecentquotes.json");
            String json = gson.toJson(motivation);
            fileWriter.write(json);


        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            if (fileWriter != null) {
                try {
                    fileWriter.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    ;
                }

            }
        }


    }
    public static void fetchAndUpdateQuotes() {
        try {
            List<String> quoteList = fetchQuotesFromAPI();

            if (!quoteList.isEmpty()) {
                String randomQuote = getRandomQuote(quoteList);
                Quote quote = new Quote("Ron Swanson", randomQuote);
                updateQuotesFile(quote);
            }
        } catch (IOException e) {
            System.out.println("Error fetching from API: " + e.getMessage());
            displayRandomLocalQuote();
        }
    }

    public static List<String> fetchQuotesFromAPI() throws IOException {
        URL url = new URL("https://ron-swanson-quotes.herokuapp.com/v2/quotes");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        InputStreamReader reader = new InputStreamReader(connection.getInputStream());
        BufferedReader bufferedReader = new BufferedReader(reader);
        String jsonData = bufferedReader.readLine();

        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return Arrays.asList(gson.fromJson(jsonData, String[].class));
    }
    public static String getRandomQuote(List<String> quoteList) {
        int randomIndex = new Random().nextInt(quoteList.size());
        return quoteList.get(randomIndex);
    }

    public static void updateQuotesFile(Quote newQuote) {
        Quote[] existingQuotes = readQuotesFromFile();
        List<Quote> updatedQuotes = new ArrayList<>(Arrays.asList(existingQuotes));
        updatedQuotes.add(newQuote);}
    public static void displayRandomLocalQuote() {
        Quote[] localQuotes = readQuotesFromFile();
        if (localQuotes.length > 0) {
            int randomIndex = new Random().nextInt(localQuotes.length);
            Quote randomQuote = localQuotes[randomIndex];
            System.out.println("Quote: " + randomQuote.getText());
            System.out.println("Author: " + randomQuote.getAuthor());
        } else {
            System.out.println("There are no quotes.");
        }
    }

    public static Quote[] readQuotesFromFile() {
        Gson gson = new Gson();
        Quote[] quotes = null;
        try (BufferedReader reader = new BufferedReader(new FileReader("app/src/main/resources/fitchedQuoetes.json"))) {
            quotes = gson.fromJson(reader, Quote[].class);
        } catch (IOException e) {
            System.out.println("Error reading quotes file: " + e.getMessage());
        }
        return quotes != null ? quotes : new Quote[0];
    }



}

